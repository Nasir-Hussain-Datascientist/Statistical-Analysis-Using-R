install.packages("tinytex")
tinytex::install_tinytex()
tinytex::check_installed()
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)  # For reading Excel files
library(dplyr)   # For data manipulation
library(knitr)   # For displaying tables
# Read data from the Excel file
brand1 <- read_excel("MA_assignment_data.xls", sheet = "brand1")
brand2 <- read_excel("MA_assignment_data.xls", sheet = "brand2")
# Summary statistics for Coca-Cola (brand1) excluding 'week' column
summary_brand1 <- brand1 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Coca-Cola
summary_brand1_transposed <- t(summary_brand1)
# Summary statistics for Pepsi-Cola (brand2) excluding 'week' column
summary_brand2 <- brand2 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Pepsi-Cola
summary_brand2_transposed <- t(summary_brand2)
# Display results in Markdown format
cat("\n### Summary Statistics for Coca-Cola (Brand 1):\n")
kable(summary_brand1_transposed)
cat("\n### Summary Statistics for Pepsi-Cola (Brand 2):\n")
kable(summary_brand2_transposed)
# Load necessary library
library(tidyverse)
# Assuming the dataset has already been loaded as brand2 data frame
# Add 1 only to variables that contain zero values for feature, display, tv, digital, ooh, and magazine
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),
log_price = log(price.brand2),
log_tv = ifelse(tv.brand2 == 0, log(tv.brand2 + 1), log(tv.brand2)),
log_digital = ifelse(digital.brand2 == 0, log(digital.brand2 + 1), log(digital.brand2)),
log_ooh = ifelse(ooh.brand2 == 0, log(ooh.brand2 + 1), log(ooh.brand2)),
log_magazine = ifelse(magazine.brand2 == 0, log(magazine.brand2 + 1), log(magazine.brand2))
)
# Estimate the regression model
model <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display the summary of the model
summary(model)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)  # For reading Excel files
library(dplyr)   # For data manipulation
library(knitr)   # For displaying tables
# Read data from the Excel file
brand1 <- read_excel("MA_assignment_data.xls", sheet = "brand1")
brand2 <- read_excel("MA_assignment_data.xls", sheet = "brand2")
# Summary statistics for Coca-Cola (brand1) excluding 'week' column
summary_brand1 <- brand1 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Coca-Cola
summary_brand1_transposed <- t(summary_brand1)
# Summary statistics for Pepsi-Cola (brand2) excluding 'week' column
summary_brand2 <- brand2 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Pepsi-Cola
summary_brand2_transposed <- t(summary_brand2)
# Display results in Markdown format
cat("\n### Summary Statistics for Coca-Cola (Brand 1):\n")
kable(summary_brand1_transposed)
cat("\n### Summary Statistics for Pepsi-Cola (Brand 2):\n")
kable(summary_brand2_transposed)
# Load necessary library
library(tidyverse)
# Assuming the dataset has already been loaded as brand2 data frame
# Add 1 only to variables that contain zero values for feature, display, tv, digital, ooh, and magazine
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),
log_price = log(price.brand2),
log_tv = ifelse(tv.brand2 == 0, log(tv.brand2 + 1), log(tv.brand2)),
log_digital = ifelse(digital.brand2 == 0, log(digital.brand2 + 1), log(digital.brand2)),
log_ooh = ifelse(ooh.brand2 == 0, log(ooh.brand2 + 1), log(ooh.brand2)),
log_magazine = ifelse(magazine.brand2 == 0, log(magazine.brand2 + 1), log(magazine.brand2))
)
# Estimate the regression model
model <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display the summary of the model
summary(model)
library(ggplot2)
ggplot(brand2, aes(x = log_feature, y = log_sales)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Feature Support vs Sales (Log-Log Model)", x = "Log(Feature Support)", y = "Log(Sales)")
# Load necessary libraries
library(tidyverse)
# Transform data for log-log regression
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),  # No +1 needed
log_price = log(price.brand2),  # No +1 needed
log_tv = ifelse(tv.brand2 == 0, log(tv.brand2 + 1), log(tv.brand2)),
log_digital = ifelse(digital.brand2 == 0, log(digital.brand2 + 1), log(digital.brand2)),
log_ooh = ifelse(ooh.brand2 == 0, log(ooh.brand2 + 1), log(ooh.brand2)),
log_magazine = ifelse(magazine.brand2 == 0, log(magazine.brand2 + 1), log(magazine.brand2))
)
# Estimate the log-log regression model
model <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display regression summary
summary(model)
# Load library for formatted tables
library(stargazer)
install.packages("stargazer")
# Load library for formatted tables
library(stargazer)
# Generate a formatted regression table
stargazer(model, type = "text", title = "Log-Log Regression Results for Pepsi Sales")
# Load library for formatted tables
library(stargazer)
# Generate a formatted regression table
stargazer(model, type = "text", title = "Log-Log Regression Results for Pepsi Sales")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)  # For reading Excel files
library(dplyr)   # For data manipulation
library(knitr)   # For displaying tables
# Read data from the Excel file
brand1 <- read_excel("MA_assignment_data.xls", sheet = "brand1")
brand2 <- read_excel("MA_assignment_data.xls", sheet = "brand2")
# Summary statistics for Coca-Cola (brand1) excluding 'week' column
summary_brand1 <- brand1 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Coca-Cola
summary_brand1_transposed <- t(summary_brand1)
# Summary statistics for Pepsi-Cola (brand2) excluding 'week' column
summary_brand2 <- brand2 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Pepsi-Cola
summary_brand2_transposed <- t(summary_brand2)
# Display results in Markdown format
cat("\n### Summary Statistics for Coca-Cola (Brand 1):\n")
kable(summary_brand1_transposed)
cat("\n### Summary Statistics for Pepsi-Cola (Brand 2):\n")
kable(summary_brand2_transposed)
# Load necessary libraries
library(tidyverse)
# Transform data for log-log regression
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),  # No +1 needed
log_price = log(price.brand2),  # No +1 needed
log_tv = ifelse(tv.brand2 == 0, log(tv.brand2 + 1), log(tv.brand2)),
log_digital = ifelse(digital.brand2 == 0, log(digital.brand2 + 1), log(digital.brand2)),
log_ooh = ifelse(ooh.brand2 == 0, log(ooh.brand2 + 1), log(ooh.brand2)),
log_magazine = ifelse(magazine.brand2 == 0, log(magazine.brand2 + 1), log(magazine.brand2))
)
# Estimate the log-log regression model
model <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display regression summary
summary(model)
# Load library for formatted tables
library(stargazer)
# Generate a formatted regression table
stargazer(model, type = "text", title = "Log-Log Regression Results for Pepsi Sales")
# Function to apply adstock transformation
adstock_transform <- function(ad_vec, lambda) {
adstock_vec <- numeric(length(ad_vec))
adstock_vec[1] <- ad_vec[1]  # First period remains the same
for (t in 2:length(ad_vec)) {
adstock_vec[t] <- ad_vec[t] + lambda * adstock_vec[t - 1]
}
return(adstock_vec)
}
# Apply adstock transformation to the advertising variables
brand2 <- brand2 %>%
mutate(
adstock_tv = adstock_transform(tv.brand2, 0.6),
adstock_digital = adstock_transform(digital.brand2, 0.6),
adstock_ooh = adstock_transform(ooh.brand2, 0.6),
adstock_magazine = adstock_transform(magazine.brand2, 0.6)
)
# Transform data for log-log regression (handling zero values correctly)
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),
log_price = log(price.brand2),
log_tv = ifelse(adstock_tv == 0, log(adstock_tv + 1), log(adstock_tv)),
log_digital = ifelse(adstock_digital == 0, log(adstock_digital + 1), log(adstock_digital)),
log_ooh = ifelse(adstock_ooh == 0, log(adstock_ooh + 1), log(adstock_ooh)),
log_magazine = ifelse(adstock_magazine == 0, log(adstock_magazine + 1), log(adstock_magazine))
)
# Estimate the log-log regression model with adstock advertising
model_adstock <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display regression summary
summary(model_adstock)
# Load necessary libraries
library(caret)      # For data partitioning
install.packages(caret)
library(caret)
library("caret")
install.packages("caret", dependencies = c("Depends", "Suggests"))
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(caret)      # For data partitioning
library(rpart)      # Decision tree
library(rpart.plot) # Visualizing decision tree
# Set seed for reproducibility
set.seed(123)
# ---- Data Preparation ----
# Function to compute Adstock transformation
adstock_transform <- function(x, lambda = 0.6) {
n <- length(x)
adstocked <- numeric(n)
adstocked[1] <- x[1]
for (i in 2:n) {
adstocked[i] <- x[i] + lambda * adstocked[i - 1]
}
return(adstocked)
}
# Apply Adstock transformation to advertising variables
brand2$tv_adstock <- adstock_transform(brand2$tv.brand2, lambda = 0.6)
brand2$digital_adstock <- adstock_transform(brand2$digital.brand2, lambda = 0.6)
brand2$ooh_adstock <- adstock_transform(brand2$ooh.brand2, lambda = 0.6)
brand2$magazine_adstock <- adstock_transform(brand2$magazine.brand2, lambda = 0.6)
# Select relevant variables (NO log transformation)
data_dt <- brand2[, c("sales.brand2", "feature.brand2", "display.brand2",
"assortment.brand2", "price.brand2",
"tv_adstock", "digital_adstock", "ooh_adstock", "magazine_adstock")]
# Split data into training (80%) and test (20%) sets
trainIndex <- createDataPartition(data_dt$sales.brand2, p = 0.8, list = FALSE)
train_data <- data_dt[trainIndex, ]
test_data <- data_dt[-trainIndex, ]
# ---- Decision Tree Model ----
# Train a Decision Tree using the training data
dt_model <- rpart(sales.brand2 ~ ., data = train_data, method = "anova")
# Visualize the decision tree
rpart.plot(dt_model, main = "Decision Tree for Pepsi Sales Prediction")
# ---- Model Evaluation ----
# Predict sales on training and test sets
train_preds <- predict(dt_model, train_data)
test_preds <- predict(dt_model, test_data)
# Compute RMSE & MAE for Decision Tree
dt_train_rmse <- sqrt(mean((train_preds - train_data$sales.brand2)^2))
dt_test_rmse <- sqrt(mean((test_preds - test_data$sales.brand2)^2))
dt_train_mae <- mean(abs(train_preds - train_data$sales.brand2))
dt_test_mae <- mean(abs(test_preds - test_data$sales.brand2))
# ---- Log-Log Regression Model ----
# Train Log-Log Regression (as in Q3) on training data
log_model <- lm(log(sales.brand2) ~ log(feature.brand2 + 1) + log(display.brand2 + 1) +
log(assortment.brand2) + log(price.brand2) +
log(tv_adstock + 1) + log(digital_adstock + 1) +
log(ooh_adstock + 1) + log(magazine_adstock + 1), data = train_data)
# Predict on test data and convert back to sales scale
log_test_preds <- exp(predict(log_model, test_data))
# Compute RMSE & MAE for Log-Log Regression
log_test_rmse <- sqrt(mean((log_test_preds - test_data$sales.brand2)^2))
log_test_mae <- mean(abs(log_test_preds - test_data$sales.brand2))
# ---- Compare Model Performance ----
results <- data.frame(
Model = c("Decision Tree", "Log-Log Regression"),
Test_RMSE = c(dt_test_rmse, log_test_rmse),
Test_MAE = c(dt_test_mae, log_test_mae)
)
print(results)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readxl)  # For reading Excel files
library(dplyr)   # For data manipulation
library(knitr)   # For displaying tables
# Read data from the Excel file
brand1 <- read_excel("MA_assignment_data.xls", sheet = "brand1")
brand2 <- read_excel("MA_assignment_data.xls", sheet = "brand2")
# Summary statistics for Coca-Cola (brand1) excluding 'week' column
summary_brand1 <- brand1 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Coca-Cola
summary_brand1_transposed <- t(summary_brand1)
# Summary statistics for Pepsi-Cola (brand2) excluding 'week' column
summary_brand2 <- brand2 %>%
select(-week) %>%  # Exclude the 'week' column
summarise(across(where(is.numeric), list(
Min = ~min(. , na.rm = TRUE),
Max = ~max(. , na.rm = TRUE),
Mean = ~mean(. , na.rm = TRUE),
Median = ~median(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE)
)))
# Transpose the summary table for Pepsi-Cola
summary_brand2_transposed <- t(summary_brand2)
# Display results in Markdown format
cat("\n### Summary Statistics for Coca-Cola (Brand 1):\n")
kable(summary_brand1_transposed)
cat("\n### Summary Statistics for Pepsi-Cola (Brand 2):\n")
kable(summary_brand2_transposed)
# Load necessary libraries
library(tidyverse)
# Transform data for log-log regression
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),  # No +1 needed
log_price = log(price.brand2),  # No +1 needed
log_tv = ifelse(tv.brand2 == 0, log(tv.brand2 + 1), log(tv.brand2)),
log_digital = ifelse(digital.brand2 == 0, log(digital.brand2 + 1), log(digital.brand2)),
log_ooh = ifelse(ooh.brand2 == 0, log(ooh.brand2 + 1), log(ooh.brand2)),
log_magazine = ifelse(magazine.brand2 == 0, log(magazine.brand2 + 1), log(magazine.brand2))
)
# Estimate the log-log regression model
model <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display regression summary
summary(model)
# Load library for formatted tables
library(stargazer)
# Generate a formatted regression table
stargazer(model, type = "text", title = "Log-Log Regression Results for Pepsi Sales")
# Function to apply adstock transformation
adstock_transform <- function(ad_vec, lambda) {
adstock_vec <- numeric(length(ad_vec))
adstock_vec[1] <- ad_vec[1]  # First period remains the same
for (t in 2:length(ad_vec)) {
adstock_vec[t] <- ad_vec[t] + lambda * adstock_vec[t - 1]
}
return(adstock_vec)
}
# Apply adstock transformation to the advertising variables
brand2 <- brand2 %>%
mutate(
adstock_tv = adstock_transform(tv.brand2, 0.6),
adstock_digital = adstock_transform(digital.brand2, 0.6),
adstock_ooh = adstock_transform(ooh.brand2, 0.6),
adstock_magazine = adstock_transform(magazine.brand2, 0.6)
)
# Transform data for log-log regression (handling zero values correctly)
brand2 <- brand2 %>%
mutate(
log_sales = log(sales.brand2),
log_feature = ifelse(feature.brand2 == 0, log(feature.brand2 + 1), log(feature.brand2)),
log_display = ifelse(display.brand2 == 0, log(display.brand2 + 1), log(display.brand2)),
log_assortment = log(assortment.brand2),
log_price = log(price.brand2),
log_tv = ifelse(adstock_tv == 0, log(adstock_tv + 1), log(adstock_tv)),
log_digital = ifelse(adstock_digital == 0, log(adstock_digital + 1), log(adstock_digital)),
log_ooh = ifelse(adstock_ooh == 0, log(adstock_ooh + 1), log(adstock_ooh)),
log_magazine = ifelse(adstock_magazine == 0, log(adstock_magazine + 1), log(adstock_magazine))
)
# Estimate the log-log regression model with adstock advertising
model_adstock <- lm(log_sales ~ log_feature + log_display + log_assortment + log_price +
log_tv + log_digital + log_ooh + log_magazine, data = brand2)
# Display regression summary
summary(model_adstock)
# Load necessary libraries
library(caret)      # For data partitioning
library(rpart)      # Decision tree
library(rpart.plot) # Visualizing decision tree
# Set seed for reproducibility
set.seed(123)
# ---- Data Preparation ----
# Function to compute Adstock transformation
adstock_transform <- function(x, lambda = 0.6) {
n <- length(x)
adstocked <- numeric(n)
adstocked[1] <- x[1]
for (i in 2:n) {
adstocked[i] <- x[i] + lambda * adstocked[i - 1]
}
return(adstocked)
}
# Apply Adstock transformation to advertising variables
brand2$tv_adstock <- adstock_transform(brand2$tv.brand2, lambda = 0.6)
brand2$digital_adstock <- adstock_transform(brand2$digital.brand2, lambda = 0.6)
brand2$ooh_adstock <- adstock_transform(brand2$ooh.brand2, lambda = 0.6)
brand2$magazine_adstock <- adstock_transform(brand2$magazine.brand2, lambda = 0.6)
# Select relevant variables (NO log transformation)
data_dt <- brand2[, c("sales.brand2", "feature.brand2", "display.brand2",
"assortment.brand2", "price.brand2",
"tv_adstock", "digital_adstock", "ooh_adstock", "magazine_adstock")]
# Split data into training (80%) and test (20%) sets
trainIndex <- createDataPartition(data_dt$sales.brand2, p = 0.8, list = FALSE)
train_data <- data_dt[trainIndex, ]
test_data <- data_dt[-trainIndex, ]
# ---- Decision Tree Model ----
# Train a Decision Tree using the training data
dt_model <- rpart(sales.brand2 ~ ., data = train_data, method = "anova")
# Visualize the decision tree
rpart.plot(dt_model, main = "Decision Tree for Pepsi Sales Prediction")
# ---- Model Evaluation ----
# Predict sales on training and test sets
train_preds <- predict(dt_model, train_data)
test_preds <- predict(dt_model, test_data)
# Compute RMSE & MAE for Decision Tree
dt_train_rmse <- sqrt(mean((train_preds - train_data$sales.brand2)^2))
dt_test_rmse <- sqrt(mean((test_preds - test_data$sales.brand2)^2))
dt_train_mae <- mean(abs(train_preds - train_data$sales.brand2))
dt_test_mae <- mean(abs(test_preds - test_data$sales.brand2))
# ---- Log-Log Regression Model ----
# Train Log-Log Regression (as in Q3) on training data
log_model <- lm(log(sales.brand2) ~ log(feature.brand2 + 1) + log(display.brand2 + 1) +
log(assortment.brand2) + log(price.brand2) +
log(tv_adstock + 1) + log(digital_adstock + 1) +
log(ooh_adstock + 1) + log(magazine_adstock + 1), data = train_data)
# Predict on test data and convert back to sales scale
log_test_preds <- exp(predict(log_model, test_data))
# Compute RMSE & MAE for Log-Log Regression
log_test_rmse <- sqrt(mean((log_test_preds - test_data$sales.brand2)^2))
log_test_mae <- mean(abs(log_test_preds - test_data$sales.brand2))
# ---- Compare Model Performance ----
results <- data.frame(
Model = c("Decision Tree", "Log-Log Regression"),
Test_RMSE = c(dt_test_rmse, log_test_rmse),
Test_MAE = c(dt_test_mae, log_test_mae)
)
print(results)
print(dt_model)  # Prints the decision tree structure in text form
summary(dt_model)  # Provides details on splits, variable importance, and error reduction
dt_model$variable.importance  # Shows which predictors are most influential
# Load necessary libraries
library(randomForest)
install.packages("randomForest")
# Load necessary libraries
library(randomForest)
library(caret)
# Set seed for reproducibility
set.seed(123)
# Train Random Forest Model (100 trees)
rf_model <- randomForest(sales.brand2 ~ ., data = train_data, ntree = 100, importance = TRUE)
# Predict on test set
rf_test_preds <- predict(rf_model, test_data)
# Compute RMSE & MAE for Random Forest
rf_test_rmse <- sqrt(mean((rf_test_preds - test_data$sales.brand2)^2))
rf_test_mae <- mean(abs(rf_test_preds - test_data$sales.brand2))
# Print model performance
rf_test_rmse
rf_test_mae
# Variable importance
importance(rf_model)
varImpPlot(rf_model)  # Plot variable importance
# Print variable importance values
importance_df <- data.frame(
Variable = c("feature.brand2", "display.brand2", "assortment.brand2",
"price.brand2", "tv_adstock", "digital_adstock",
"ooh_adstock", "magazine_adstock"),
IncMSE = c(6.397987, 6.250806, 3.742327, 7.695461, 1.585955, 3.639081, 3.335981, 2.167643),
IncNodePurity = c(1392378639, 1456755072, 639345260, 1860758157, 481698599, 318233663, 323976896, 215362703)
)
knitr::kable(importance_df, caption = "Variable Importance in Random Forest Model")
